{
	"name": "airbnbflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          booking_id as string,",
				"          property_id as string,",
				"          customer_id as integer,",
				"          owner_id as string,",
				"          check_in_date as string,",
				"          check_out_date as string,",
				"          booking_date as string,",
				"          amount as double,",
				"          currency as string,",
				"          property_location as (city as string, country as string),",
				"          timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     enableChangeFeed: true,",
				"     changeFeedStartFromTheBeginning: false,",
				"     format: 'document') ~> source1",
				"source(output(",
				"          customer_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          country as string,",
				"          zip_code as string,",
				"          signup_date as date,",
				"          last_login as timestamp,",
				"          total_bookings as integer,",
				"          total_spent as decimal(10,2),",
				"          preferred_language as string,",
				"          referral_code as string,",
				"          account_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> source2",
				"source1 split(check_in_date<check_out_date,",
				"     disjoint: true) ~> split1@(badRecords, AcceptedRecords)",
				"split1@AcceptedRecords derive({stay-duration} = (toTimestamp(check_out_date) - toTimestamp(check_in_date)) / 86400000,",
				"          booking_year = year(booking_date),",
				"          booking_month = month(booking_date),",
				"          full_address = booking_id,",
				"          city = proper_location.city) ~> derivedColumn1",
				"derivedColumn1, source2 lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(ERROR_FUNCTION(''), true),",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 alterRow(insertIf(isNull(source2@booking_id)),",
				"     updateIf(not(isNull(source2@booking_id)))) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          booking_id,",
				"          property_id,",
				"          customer_id = split1@AcceptedRecords@customer_id,",
				"          owner_id,",
				"          check_in_date,",
				"          check_out_date,",
				"          booking_date,",
				"          amount,",
				"          currency,",
				"          property_location,",
				"          timestamp,",
				"          {stay-duration},",
				"          booking_year,",
				"          booking_month,",
				"          full_address,",
				"          city = derivedColumn1@city,",
				"          customer_id = source2@customer_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address,",
				"          city = source2@city,",
				"          state,",
				"          country,",
				"          zip_code,",
				"          signup_date,",
				"          last_login,",
				"          total_bookings,",
				"          total_spent,",
				"          preferred_language,",
				"          referral_code,",
				"          account_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}